' Generated by UML Generator
' Encoded: hLXjTzCs5FxUS_OVVFB9QPh2Dc33G8kRfYKiIKFZCg0fFOgZ9XgE5IIvK1Z_VLSljcN72McxBuaitNTTFVTABxb0J2JpQ8j_8l42CJHtmWXnxWl1o3WHk1FIU4Y-OUVXrenCi1CI5aPuQqjHEOTuWUC9ZaE2UOzESEHyttASviIQzfmUMZmVWhXukkCCiJ3ZlJtdXHFZByuhn6UIPC-jIruoNqHuZcE11A7nxTdZ6MP4e3Z49LRDLiq5lj2GL6cqntvE5Tmiy2eJldDfU_Z3QRyBslt3uUN03uBsQTzp1aW8p69WCwFTaCuN9C9k3NyL438-6l66UuwQt_pcXyiBCtZOV7fviLsl5QLtUeDkkzVk1vifoEAwLeUxxy7ozexyMKLJtovPyjf_wrzs_VxnPV1-q1vwzZQ1AV2rIw_SsZKbazgEKnjJ6c4Kg-6DmF8_d24c__cCCY4795P_4OsdylygeaXDJ6WoZXIBbYz79-D_SAXM-ybyZ9MWWrn72sIZK9Xvet2OAkh40a_rMjSeEqgL7MfbHMTR9zrkknLqJlhhlMtHA0Ap85UKRCALI5YLVv0jykzDWXDbpY7-h0S-O-Wc9UwI-1EUf5yoomnxm30sGvDxwQmSAdkRwZ3mLi85dRVaONK5vAndpa7TSyms05q3nIYw-OOLsI66eyrKahlgaFVHF6FRqUXWqLW2vVvQqeu8ZYOsGBY0CmeaFEUirrMZPQuU5ZEwELjpmMY8EJ_6CHpxK1vBNcNsD5-lidYIQxnnEKrOg8EH2m2Sd69Hc2mAw1Hmgye6o6dChb28xUcIa1ozt716ead92a1eqB362WkYDlO39bLOIl1c2LRHGm8F8XIBitbqYYEDbJEou6uz5RJr8wqBHm0v0yGuPheWNAblCSieOMvvM-NiKjnC7ck3JSx2CHCimSLpsVM7co7XHmLk-zu2JZS99HhMzvNQjU2xamdgdNM3JhVJRvVmk0-QZ_nM-yv6P0boFqFyWs5mwhU2o_k518svaC0fl_w7y80Lfvs3is2Zy3nuu1mpcYoSNo492ITZ4X5nuxXq8TCEHVLVjepDsk9_5unSGuB2FnM0kdXItvVBDQVXPB9-ynnjJ56EgoSh67xtd2i2L2LwDLT1_iXp61O9E2JFawGy7us-Z4Qx5mq8xVFpZtiNZRtwlYgni79Htw_Ba1PaFFOSbBPUJWp7G8cfZlcI0K-0cNCoZIKCbOn-8QdFFpwxW9rzLbkLkRrsyEhaSCCTAZfhRuTE81DOyp71LoY9XFcIaNc-f-C09bbncAi2S0lVLTUAmJWEzAEHwvv_h2iAHLJsTNCFombc4YjDDPq0XUInCmDskSf9S1qcrNXxoTRHwFj-NhqREOYwPVpSSIgAecJa1jibWYxNe0AaMuHr6sn1H8URZe4bKgT1NRlgIhCKJIV5BD_0XH8OaRX2gMRBhnRn5LrBgNi1leAcmPBOjLYoBJOjWGnVHU1aBODjDvNiM5SsoYovcQ0v8h4BzJAhbESNALbMwVG6zQ1xcTh5JdLsddCGqH0kLbFrcJQ9aWP_nM42QZsdRKP3pAv9g6hQD3Mgmawv3iKt18zQD8d58VqIT-MthfC3xJkegIgMAgqA5hjYnZ2QA56Ux51a5ZLuCfuJ4I3-QIc0LfpKtJ5Nw2vtPTaMUAeZi7bdYPY0wUwTusu2quv3I7uJ-RmPUEMV3jj1oWyXg3tyzRVV7pr-yiUVJ_s3rc7xwFXLv_LVtLx_PF3cT1YSlVtxtViFQ1m2J4rdv9zFqJocYy-CY-JwozURRytBMXR0J0jMkbq1TpShFFb9AX4-UUHEa42mCN09KIwLswQbtLPkDIexfKQOCDaCfb8E4cWNiSoFnW9nOTdHG57KqiIyH6qki8KvDqUW9NlSQjXf06R0z_fENKAJjiAjDhs4JeQsNkLW8Zh2ZwA00k5Ccbn11ATe23EHngbbaYpggQqws1beylBDBhtgorbzrMyKMlfD6925aXlGDxDcu6tM1TtYMKFNqhkmDeglGAL74NabNVyEe_aDWD-QMTiza8LzpNFCUXbPv4vLcw9kXdULfUsvlw1yEpin4GH5Rr6Kt5tQfFpwvbKyo6dEfVbIa8vavxBQ3lESihSsp-ud8pDbg43pdhRSKuWisvvpYW60641W5puDOM7EWag60T-EAEj3CSW0nuApYWsesArCKdvcRJbgAUsAYXT_hNDTnwUU5mnSkHkyHQGDdMjZrWhITE-gdZsoZLtDhrsgOjQx-HEjLh0gbUrOTyXr1bXojDwx2CbHOhK_nJcMSVp4p_MYLxY-iNHrV6yXc71pu0_AruE2M7qIRoKtFRoLWdivrcmQuFMMzYp0s5pYMXipv_tiEdwB0EHtU5KUrYMRBf6RMhqm1NNpow1SwTXGKLmDQNoDcGLM0HtUpCSqSYlFIa5itbkeUo0isus18T9UhY9GS9ZBiH5HK4rNV9nShewxktjvKsszMcutcvNpadxvJbQy14hU2fgbthxPj7HdJQZaNguBB-4Rkkl_00
' URL: http://www.plantuml.com/plantuml/uml/hLXjTzCs5FxUS_OVVFB9QPh2Dc33G8kRfYKiIKFZCg0fFOgZ9XgE5IIvK1Z_VLSljcN72McxBuaitNTTFVTABxb0J2JpQ8j_8l42CJHtmWXnxWl1o3WHk1FIU4Y-OUVXrenCi1CI5aPuQqjHEOTuWUC9ZaE2UOzESEHyttASviIQzfmUMZmVWhXukkCCiJ3ZlJtdXHFZByuhn6UIPC-jIruoNqHuZcE11A7nxTdZ6MP4e3Z49LRDLiq5lj2GL6cqntvE5Tmiy2eJldDfU_Z3QRyBslt3uUN03uBsQTzp1aW8p69WCwFTaCuN9C9k3NyL438-6l66UuwQt_pcXyiBCtZOV7fviLsl5QLtUeDkkzVk1vifoEAwLeUxxy7ozexyMKLJtovPyjf_wrzs_VxnPV1-q1vwzZQ1AV2rIw_SsZKbazgEKnjJ6c4Kg-6DmF8_d24c__cCCY4795P_4OsdylygeaXDJ6WoZXIBbYz79-D_SAXM-ybyZ9MWWrn72sIZK9Xvet2OAkh40a_rMjSeEqgL7MfbHMTR9zrkknLqJlhhlMtHA0Ap85UKRCALI5YLVv0jykzDWXDbpY7-h0S-O-Wc9UwI-1EUf5yoomnxm30sGvDxwQmSAdkRwZ3mLi85dRVaONK5vAndpa7TSyms05q3nIYw-OOLsI66eyrKahlgaFVHF6FRqUXWqLW2vVvQqeu8ZYOsGBY0CmeaFEUirrMZPQuU5ZEwELjpmMY8EJ_6CHpxK1vBNcNsD5-lidYIQxnnEKrOg8EH2m2Sd69Hc2mAw1Hmgye6o6dChb28xUcIa1ozt716ead92a1eqB362WkYDlO39bLOIl1c2LRHGm8F8XIBitbqYYEDbJEou6uz5RJr8wqBHm0v0yGuPheWNAblCSieOMvvM-NiKjnC7ck3JSx2CHCimSLpsVM7co7XHmLk-zu2JZS99HhMzvNQjU2xamdgdNM3JhVJRvVmk0-QZ_nM-yv6P0boFqFyWs5mwhU2o_k518svaC0fl_w7y80Lfvs3is2Zy3nuu1mpcYoSNo492ITZ4X5nuxXq8TCEHVLVjepDsk9_5unSGuB2FnM0kdXItvVBDQVXPB9-ynnjJ56EgoSh67xtd2i2L2LwDLT1_iXp61O9E2JFawGy7us-Z4Qx5mq8xVFpZtiNZRtwlYgni79Htw_Ba1PaFFOSbBPUJWp7G8cfZlcI0K-0cNCoZIKCbOn-8QdFFpwxW9rzLbkLkRrsyEhaSCCTAZfhRuTE81DOyp71LoY9XFcIaNc-f-C09bbncAi2S0lVLTUAmJWEzAEHwvv_h2iAHLJsTNCFombc4YjDDPq0XUInCmDskSf9S1qcrNXxoTRHwFj-NhqREOYwPVpSSIgAecJa1jibWYxNe0AaMuHr6sn1H8URZe4bKgT1NRlgIhCKJIV5BD_0XH8OaRX2gMRBhnRn5LrBgNi1leAcmPBOjLYoBJOjWGnVHU1aBODjDvNiM5SsoYovcQ0v8h4BzJAhbESNALbMwVG6zQ1xcTh5JdLsddCGqH0kLbFrcJQ9aWP_nM42QZsdRKP3pAv9g6hQD3Mgmawv3iKt18zQD8d58VqIT-MthfC3xJkegIgMAgqA5hjYnZ2QA56Ux51a5ZLuCfuJ4I3-QIc0LfpKtJ5Nw2vtPTaMUAeZi7bdYPY0wUwTusu2quv3I7uJ-RmPUEMV3jj1oWyXg3tyzRVV7pr-yiUVJ_s3rc7xwFXLv_LVtLx_PF3cT1YSlVtxtViFQ1m2J4rdv9zFqJocYy-CY-JwozURRytBMXR0J0jMkbq1TpShFFb9AX4-UUHEa42mCN09KIwLswQbtLPkDIexfKQOCDaCfb8E4cWNiSoFnW9nOTdHG57KqiIyH6qki8KvDqUW9NlSQjXf06R0z_fENKAJjiAjDhs4JeQsNkLW8Zh2ZwA00k5Ccbn11ATe23EHngbbaYpggQqws1beylBDBhtgorbzrMyKMlfD6925aXlGDxDcu6tM1TtYMKFNqhkmDeglGAL74NabNVyEe_aDWD-QMTiza8LzpNFCUXbPv4vLcw9kXdULfUsvlw1yEpin4GH5Rr6Kt5tQfFpwvbKyo6dEfVbIa8vavxBQ3lESihSsp-ud8pDbg43pdhRSKuWisvvpYW60641W5puDOM7EWag60T-EAEj3CSW0nuApYWsesArCKdvcRJbgAUsAYXT_hNDTnwUU5mnSkHkyHQGDdMjZrWhITE-gdZsoZLtDhrsgOjQx-HEjLh0gbUrOTyXr1bXojDwx2CbHOhK_nJcMSVp4p_MYLxY-iNHrV6yXc71pu0_AruE2M7qIRoKtFRoLWdivrcmQuFMMzYp0s5pYMXipv_tiEdwB0EHtU5KUrYMRBf6RMhqm1NNpow1SwTXGKLmDQNoDcGLM0HtUpCSqSYlFIa5itbkeUo0isus18T9UhY9GS9ZBiH5HK4rNV9nShewxktjvKsszMcutcvNpadxvJbQy14hU2fgbthxPj7HdJQZaNguBB-4Rkkl_00
' Generated on: 2025-08-09T03:02:26.844790100

@startuml
skinparam classAttributeIconSize 0
hide circle

class DependenciesModel {
  -dependencies: Map<String, Set<String>> = new HashMap<>()
  -implementations: Map<String, Set<String>> = new HashMap<>()
  -inheritance: Map<String, String> = new HashMap<>()
  -associations: Map<String, Map<String, AssociationType>> = new HashMap<>()
  -{static} EXTENDS_PATTERN: Pattern = Pattern.compile("extends\\s+([a-zA-Z_][a-zA-Z0-9_]*)")
  -{static} IMPLEMENTS_PATTERN: Pattern = Pattern.compile("implements\\s+([a-zA-Z_][a-zA-Z0-9_]*)(?:\\s*,\\s*([a-zA-Z_][a-zA-Z0-9_]*))*")
  -{static} JAVA_LANG_TYPES: Set<String> = Set.of("void", "boolean", "byte", "char", "short", "int", "long", "float", "double", "String", "Object", "Number", "Boolean", "Character", "Byte", "Short", "Integer", "Long", "Float", "Double")
  -{static} COLLECTION_TYPES: Set<String> = Set.of("Collection", "List", "Set", "Map", "Queue", "Deque", "ArrayList", "LinkedList", "HashSet", "TreeSet", "HashMap", "TreeMap")
  --
  -isCustomClass(type: String): boolean
  +analyzeClassDeclaration(className: String, classDeclaration: String): void
  +analyzeFieldDependencies(umlModel: UMLModel): void
  +analyzeMethodDependencies(umlModel: UMLModel): void
  -processGenericTypes(className: String, genericType: String): void
  +addDependency(sourceClass: String, targetClass: String): void
  +addImplementation(className: String, interfaceName: String): void
  +addInheritance(childClass: String, parentClass: String): void
  +addAssociation(sourceClass: String, targetClass: String, type: AssociationType): void
  +generatePlantUmlRelationships(): String
}

class FileParser {
  -filePath: String
  -umlModel: UMLModel
  -className: String
  -isClass: boolean = true
  -{static} CLASS_PATTERN: Pattern = Pattern.compile("^\\s*(?:public\\s+)?class\\s+([a-zA-Z_][a-zA-Z0-9_]*)", Pattern.MULTILINE)
  -{static} INTERFACE_PATTERN: Pattern = Pattern.compile("^\\s*(?:public\\s+)?interface\\s+([a-zA-Z_][a-zA-Z0-9_]*)", Pattern.MULTILINE)
  -{static} ABSTRACT_CLASS_PATTERN: Pattern = Pattern.compile("^\\s*(?:public\\s+)?abstract\\s+class\\s+([a-zA-Z_][a-zA-Z0-9_]*)", Pattern.MULTILINE)
  -{static} ATTRIBUTE_PATTERN: Pattern = Pattern.compile(// Group 1: visibility (optional)
"^\\s*(public|private|protected)?\\s*" + // Group 2: static (optional)
"(static)?\\s*" + // Group 3: final (optional)
"(final)?\\s*" + // Group 4: return type
"([\\w\\.]+(?:<[^>]+>)?(?:\\[\\])?)\\s+" + // Group 5: attribute name
"([a-zA-Z_][a-zA-Z0-9_]*)\\s*" + // Group 6: assignment (optional)
"(=\\s*[^;]+)?;")
  -{static} INTERFACE_METHOD_PATTERN: Pattern = Pattern.compile(// return type
"^\\s*(public\\s+)?(static\\s+)?(default\\s+)?([\\w<>\\[\\]]+)\\s+" + // method name
"([a-zA-Z_][a-zA-Z0-9_]*)\\s*" + // parameters
"\\(([^)]*)\\)\\s*;")
  -{static} METHOD_PATTERN: Pattern = Pattern.compile("^\\s*(public|protected|private)?\\s*(static)?\\s*(final)?\\s*(?:([\\w<>\\[\\]]+)\\s+)?(\\w+)\\s*\\(([^)]*)\\)\\s*\\{?")
  --
  +FileParser(filePath: String, umlModel: UMLModel)
  -setClassName(className: String): void
  +getClassName(): String
  -setIsClass(truth: boolean): void
  -parseClassInterfaceAbstractName(line: String): void
  -parseAttributeInfo(line: String): void
  -parseMethods(line: String): void
  +run(): void
  -{static} processFile(filePath: String, gene: PlantUmlGenerator): void
  +{static} main(args: String[]): void
}

class ParserManager {
  -fileQueue: BlockingQueue<String>
  -executor: ExecutorService
  -generator: PlantUmlGenerator
  -latch: CountDownLatch
  -isProcessing: boolean = true
  --
  +ParserManager(threadCount: int)
  +submitTask(filePath: String): void
  +startProcessing(): void
  -processFile(file: File): void
  +shutdown(): void
  +{static} main(args: String[]): void
}

class PlantUmlEncoder {
  -{static} CHARSET: String = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_"
  --
  +{static} encode(text: String): String
  -{static} encode64(data: byte[]): String
}

class PlantUmlGenerator {
  +umlModel: UMLModel
  +current: StringBuilder
  +past: String
  +allCurrents: StringBuilder = new StringBuilder()
  --
  +PlantUmlGenerator(umlModel: UMLModel)
  +setUML(umlModel: UMLModel): void
  -setCurrent(current: StringBuilder): void
  +getCurrent(): StringBuilder
  +putItAllTogether(): StringBuilder
  +genSingleClass(): StringBuilder
}

class UMLModel {
  +classNames: Set<String> = new HashSet<>()
  +interfaceNames: Set<String> = new HashSet<>()
  +abstractNames: Set<String> = new HashSet<>()
  -attributeVisibility: Map<String, String> = new HashMap<>()
  -methodVisibility: Map<String, String> = new HashMap<>()
  +classAttributes: Map<String, List<String>> = new HashMap<>()
  +classMethods: Map<String, List<String>> = new HashMap<>()
  +methodParams: Map<String, Map<String, String>> = new HashMap<>()
  +attributeReturnTypes: Map<String, Map<String, String>> = new HashMap<>()
  +methodReturnTypes: Map<String, Map<String, String>> = new HashMap<>()
  -attributeInitialValues: Map<String, Map<String, String>> = new HashMap<>()
  -dependenciesModel: DependenciesModel = new DependenciesModel()
  +attributeFinal: Map<String, Map<String, Boolean>> = new HashMap<>()
  -methodFinal: Map<String, Map<String, Boolean>> = new HashMap<>()
  -attributeStatic: Map<String, Map<String, Boolean>> = new HashMap<>()
  -methodStatic: Map<String, Map<String, Boolean>> = new HashMap<>()
  -lock: ReentrantLock = new ReentrantLock()
  --
  +resetForNextClass(): void
  +getDependenciesModel(): DependenciesModel
  +resetVisibility(): void
  +resetMethods(): void
  +addClass(className: String): void
  +addInterface(interfaceName: String): void
  +addAbstract(abstractName: String): void
  +addAttribute(className: String, attributeName: String): void
  +addMethod(className: String, method: String): void
  +addAttributeVisibility(attributeName: String, visibility: String): void
  +addMethodVisibility(methodName: String, visibility: String): void
  +addMethodReturnType(className: String, methodName: String, returnType: String): void
  +addAttributeReturnType(className: String, attributeName: String, returnType: String): void
  +addAttributeFinal(className: String, attributeName: String, isFinal: Boolean): void
  +addAttributeStatic(className: String, attributeName: String, isStatic: Boolean): void
  +addMethodFinal(className: String, methodName: String, isFinal: Boolean): void
  +addMethodStatic(className: String, methodName: String, isStatic: Boolean): void
  +addAttributeAssignment(className: String, attributeName: String, assignmentValue: String): void
  +addMethodParams(className: String, methodName: String, params: String): void
  +getClassName(): String
  +getInterfaceName(): String
  +convertVisibilityToSymbol(visibility: String): String
  +getAttributesInfo(): List<String>
  +getMethodInfo(): List<String>
  +resetAttributes(): void
  +toString(): String
}

DependenciesModel ..> UMLModel
FileParser *-- UMLModel
FileParser ..> PlantUmlGenerator
ParserManager *-- PlantUmlGenerator
PlantUmlGenerator --> UMLModel
UMLModel *-- DependenciesModel
@enduml